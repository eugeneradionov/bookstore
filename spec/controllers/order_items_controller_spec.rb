# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe OrderItemsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # OrderItem. As you add validations to OrderItem, be sure to
  # adjust the attributes here as well.

  before do
    @book = FactoryGirl.create(:book)
    @cart = FactoryGirl.create(:cart)
  end

  let(:valid_attributes) do
    { book_id: @book.id,
      cart_id: @cart.id }
  end

  describe 'POST #create' do
    it 'creates a new OrderItem' do
      expect do
        post :create, params: valid_attributes
      end.to change(OrderItem, :count).by(1)
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested order_item' do
      order_item = OrderItem.create! valid_attributes
      expect do
        delete :destroy, params: { id: order_item.to_param }
      end.to change(OrderItem, :count).by(-1)
    end

    it 'redirects to the order_items list' do
      order_item = OrderItem.create! valid_attributes
      delete :destroy, params: { id: order_item.to_param }
      expect(response).to redirect_to(cart_path)
    end
  end
end
